** [[https://en.wikipedia.org/wiki/Fizz_buzz][Fizzbuzz]]

Slightly modified the problem to use =-3= instead of =Fizz= and =-5= instead of Buzz. Reason is wanted to do this
via list comprehensions in haskell which are type homogenous.

#+BEGIN_SRC haskell :exports both
  let fizzBuzz :: [Int] -> [Int]
  let fizzBuzz inputList = [if x `mod` 3 == 0 then -3 
                            else if x `mod` 5 == 0 then -5 
                            else x | x <- inputList]
  fizzBuzz [1..10] -- try it out
#+END_SRC

#+RESULTS:
| 1 | 2 | -3 | 4 | -5 | -3 | 7 | 8 | -3 | -5 |


** Lowercase a sentence

#+BEGIN_SRC haskell :exports both
  import Data.Char
  let lowerSentence :: [c] -> [c]
  let lowerSentence sentence = [ toLower letter | letter <- sentence ]
  lowerSentence "Haskell is A RealLY cOol Lanugage!"
#+END_SRC

#+RESULTS:
: haskell is a really cool lanugage!


** Remove all vowels (a/A, e/E, i/I, o/O, u/U)

#+BEGIN_SRC haskell :exports both
  let removeVowels :: [c] -> [c]
  let removeVowels sentence = [ letter | letter <- sentence , not ((toLower letter) `elem` "aeiou") ]
  removeVowels "This is not an Umbrella."
#+END_SRC

#+RESULTS:
: Ths s nt n mbrll.


** Length of a string

#+BEGIN_SRC haskell :exports both
  let length' list = sum [1 | _ <- list]
#+END_SRC

#+BEGIN_SRC haskell :exports both
  length' [99,76,5,6,8]
#+END_SRC

#+RESULTS:
: 5

#+BEGIN_SRC haskell :exports both
  length' "starwars"
#+END_SRC

#+RESULTS:
: 8

#+BEGIN_SRC haskell :exports both
  length' ["starwars","vader","galactica"]
#+END_SRC

#+RESULTS:
: 3


** Smaller number longer word

Given a list of integers e.g. =[1,2..8]=, list all combinations of pairs of these numbers in which the
smaller number has a larger word. 

One example is =(3,6)= because =3 < 6= and =length("three") > length("six)=. Note tha the length function returns
the number of characters in a string e.g. length("three") = 5 and length("six) = 3.

#+BEGIN_SRC haskell :exports both
    let zipAllCombinations list1 list2 = [(x,y) | x <- list1, y <- list2]
    let generateCombinations :: [int] -> [((int,int), ([c],[c]))]
    let generateCombinations numbers names = 
          zip (zipAllCombinations numbers numbers) (zipAllCombinations names names)
    let snlw :: [((int,int), ([c],[c]))] -> [((int,int), ([c],[c]))]
    let snlw combinations = 
          [fst pair | pair <- combinations , 
           fst (fst pair) < snd (fst pair), length (fst (snd pair)) > length (snd (snd pair))]
    snlw (generateCombinations [1..8] ["one","two","three","four","five","six","seven","eight"])  
#+END_SRC

#+RESULTS:
| 3 | 4 |
| 3 | 5 |
| 3 | 6 |
| 4 | 6 |
| 5 | 6 |


** Find the triangle

Let there be a right angled triangle =T=, with sides of length =c=, =b=, and =a= where =c= is the
hypotenuse. Also all lengths are integers. Find all triples =(c,b,a)= for triangles where the
perimeter of the triangle is equal to =24=. Assume that =c,b,a < 10=.

Alright, so we know that this will always holds true for T:
=c^2 = a^2 + b^2=

Also, perimeter of T is =c+b+a=. 

#+BEGIN_SRC haskell :exports both
  let findTriangles :: int -> int -> (int,int,int)
  let findTriangles numberLimit perimeterLimit = [(c,b,a) | c <- [1..numberLimit], b <- [1..numberLimit], a <- [1..numberLimit], c^2 == a^2 + b^2, c + b + a == perimeterLimit]
  findTriangles 10 24
#+END_SRC

#+RESULTS:
| 10 | 6 | 8 |
| 10 | 8 | 6 |


** Finding if sum exists in array

Finds whether sum of any two elements in the array matches a given sum or not.

#+BEGIN_SRC C++ :exports both
  #include <iostream>
  #include <unordered_set>

  bool sumFound(const int aArray[], const size_t aSize, const int aSum) {
      std::unordered_set<int> complements;
      for (size_t index = 0; index < aSize; ++index) {
          if (complements.find(aArray[index]) != complements.end()) {
              return true;
          }
          complements.insert(aSum - aArray[index]);
      }
      return false;
  }

  int main() {
      const size_t arraySize = 10;
      int array[arraySize] = {2, 5, 6, 13, 3, 5, 9, 7, 1, 12};
      std::cout << sumFound(array, arraySize, 25) << std::endl;
      return 0;
  }

#+END_SRC

#+RESULTS:
: 1

Time complexity is O(n) and space complexity is also O(n). This algorithm works for any array, sorted or not.
