** [[https://en.wikipedia.org/wiki/Fizz_buzz][Fizzbuzz]]

Slightly modified the problem to use =-3= instead of =Fizz= and =-5= instead of Buzz. Reason is wanted to do this
via list comprehensions in haskell which are type homogenous.

#+BEGIN_SRC haskell :exports both
  let fizzBuzz :: [Int] -> [Int]
  let fizzBuzz inputList = [if x `mod` 3 == 0 then -3 
                            else if x `mod` 5 == 0 then -5 
                            else x | x <- inputList]
  fizzBuzz [1..10] -- try it out
#+END_SRC

#+RESULTS:
| 1 | 2 | -3 | 4 | -5 | -3 | 7 | 8 | -3 | -5 |


** Lowercase a sentence

#+BEGIN_SRC haskell :exports both
  import Data.Char
  let lowerSentence :: [c] -> [c]
  let lowerSentence sentence = [ toLower letter | letter <- sentence ]
  lowerSentence "Haskell is A RealLY cOol Lanugage!"
#+END_SRC

#+RESULTS:
: haskell is a really cool lanugage!

** Remove all vowels (a/A, e/E, i/I, o/O, u/U)

#+BEGIN_SRC haskell :exports both
  let removeVowels :: [c] -> [c]
  let removeVowels sentence = [ letter | letter <- sentence , not ((toLower letter) `elem` "aeiou") ]
  removeVowels "This is not an Umbrella."
#+END_SRC

#+RESULTS:
: Ths s nt n mbrll.


